% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-intelligibility.R
\name{fit_beta_gamlss}
\alias{fit_beta_gamlss}
\alias{fit_beta_gamlss_se}
\title{Fit a beta regression model (for intelligibility)}
\source{
Associated article: \url{https://doi.org/10.1044/2021_JSLHR-21-00142}
}
\usage{
fit_beta_gamlss(data, var_x, var_y, df_mu = 3, df_sigma = 2, control = NULL)

fit_beta_gamlss_se(
  data,
  name_x,
  name_y,
  df_mu = 3,
  df_sigma = 2,
  control = NULL
)
}
\arguments{
\item{data}{a data frame}

\item{var_x, var_y}{(unquoted) variable names giving the predictor variable
(e.g., \code{age}) and outcome variable (.e.g, \code{intelligibility}).}

\item{df_mu, df_sigma}{degrees of freedom}

\item{control}{a \code{\link[gamlss:gamlss.control]{gamlss::gamlss.control()}} controller. Defaults to \code{NULL}
which uses default settings, except for setting trace to \code{FALSE} to silence
the output from gamlss.}

\item{name_x, name_y}{quoted variable names giving the predictor variable
(e.g., \code{"age"}) and outcome variable (.e.g, \code{"intelligibility"}). These arguments
apply to \code{fit_beta_gamlss_se()}.}
}
\value{
for \code{fit_beta_gamlss()} and \code{fit_beta_gamlss_se()}, a
\code{\link[=mem_gamlss]{mem_gamlss()}}-fitted model. The \code{.user} data in the model includes degrees
of freedom for each parameter and the \code{\link[splines:ns]{splines::ns()}} basis for each
parameter. For \code{predict_beta_gamlss()}, a dataframe containing the
model predictions for mu and sigma, plus columns for each centile in
\code{centiles}.
}
\description{
The function fits the same type of GAMLSS model as used in \href{https://doi.org/10.1044/2021_JSLHR-21-00142}{Hustad and colleagues (2021)} ðŸ”“:
A beta regression model (via \code{\link[gamlss.dist:BE]{gamlss.dist::BE()}}) with natural cubic splines
on the mean (mu) and scale (sigma). This model is fitted using this package's
\code{\link[=mem_gamlss]{mem_gamlss()}} wrapper function.
}
\details{
There are two versions of this function. The main version is
\code{fit_beta_gamlss()}, and it works with unquoted column names (e.g.,
\code{age}). The alternative version is \code{fit_beta_gamlss_se()}; the final
"se" stands for "Standard Evaluation". This designation means that the
variable names must be given as strings (so, the quoted \code{"age"} instead of
bare name \code{age}). This alternative version is necessary when we fit several
models using parallel computing with \code{\link[furrr:future_map]{furrr::future_map()}} (as when using
bootstrap resampling).

\code{\link[=predict_centiles]{predict_centiles()}} will work with this function, but it will likely throw a
warning message. Therefore, \code{predict_beta_gamlss()} provides an
alternative way to compute centiles from the model. It manually computes the
centiles instead of relying on \code{\link[gamlss:centiles]{gamlss::centiles()}}.
\subsection{GAMLSS does beta regression differently}{

This part is a brief note that GAMLSS uses a different parameterization of the
beta distribution for its beta family than other packages.

The canonical parameterization of the beta distribution uses shape parameters
\eqn{\alpha} and \eqn{\beta} and the probability density function:

\deqn{f(y;\alpha,\beta) = \frac{1}{\Beta(\alpha,\beta)} y^{\alpha-1}(1-y)^{\beta-1}}

where \eqn{\Beta} is the \href{https://en.wikipedia.org/wiki/Beta_function}{beta function}.

For beta regression, the distribution is reparameterized so that there is a
mean probability \eqn{\mu} and some other parameter that represents the
spread around that mean. In GAMLSS (\code{gamlss.dist::BE()}), they use a scale
parameter \eqn{\sigma} (larger values mean more spread around mean).
Everywhere else---\code{\link[betareg:betareg]{betareg::betareg()}} and \code{\link[rstanarm:stan_betareg]{rstanarm::stan_betareg()}} in
\code{vignette("betareg", "betareg")}, \code{\link[brms:brmsfamily]{brms::Beta()}} in
`vignette("brms_families", "brms")``, \code{\link[mgcv:Beta]{mgcv::betar()}}---it's a precision
parameter \eqn{\phi} (larger values mean more precision, less spread around
mean). Here is a comparison:

\deqn{
 \text{betareg, brms, mgcv, etc.} \\
 \mu              = \alpha / (\alpha + \beta) \\
 \phi             = \alpha + b \\
 \textsf{E}(y)    = \mu \\
 \textsf{VAR}(y)  = \mu(1-\mu)/(1 + \phi) \\
}

\deqn{
 \text{GAMLSS} \\
 \mu             = \alpha / (\alpha + \beta) \\
 \sigma          = (1 / (\alpha + \beta + 1))^.5 \\
 \textsf{E}(y)   = \mu \\
 \textsf{VAR}(y) = \mu(1-\mu)\sigma^2
}
}
}
\examples{
data_fake_intelligibility

m <- fit_beta_gamlss(
  data_fake_intelligibility,
  age_months,
  intelligibility
)

# using "qr" in summary() just to suppress a warning message
summary(m, type = "qr")

# Alternative interface
d <- data_fake_intelligibility
m2 <- fit_beta_gamlss_se(
  data = d,
  name_x = "age_months",
  name_y = "intelligibility"
)
coef(m2) == coef(m)

# how to use control to change gamlss() behavior
m_traced <- fit_beta_gamlss(
  data_fake_intelligibility,
  age_months,
  intelligibility,
  control = gamlss::gamlss.control(n.cyc = 15, trace = TRUE)
)

# The `.user` space includes the spline bases, so that we can make accurate
# predictions of new xs.
names(m$.user)

# predict logit(mean) at 55 months:
logit_mean_55 <- cbind(1, predict(m$.user$basis_mu, 55)) \%*\% coef(m)
logit_mean_55
stats::plogis(logit_mean_55)

}
\concept{models}
