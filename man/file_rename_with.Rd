% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{file_replace_name}
\alias{file_replace_name}
\alias{file_rename_with}
\title{Rename file basenames using functions}
\usage{
file_replace_name(
  path,
  pattern,
  replacement,
  .dry_run = FALSE,
  .overwrite = FALSE
)

file_rename_with(path, .fn, ..., .dry_run = FALSE, .overwrite = FALSE)
}
\arguments{
\item{path}{vector of paths for files to rename}

\item{pattern, replacement}{arguments forwarded to \code{\link[stringr:str_replace]{stringr::str_replace()}}}

\item{.dry_run}{when \code{FALSE} (the default), files are renamed. When \code{TRUE},
no files are renamed but the affected files are printed out.}

\item{.overwrite}{Whether to overwrite files. Defaults to \code{FALSE} so that
overwriting files is opt-in.}

\item{.fn}{function to call file paths}

\item{...}{arguments passed onto \code{.fn}}
}
\value{
the contents of \code{paths} with updated file names. Duplicated elements
are removed. This function throws an error if a name collision is detected
(where two files are both renamed into the same target path).
}
\description{
\code{file_replace_name()} uses \code{\link[stringr:str_replace]{stringr::str_replace()}} to rename files.
\code{file_rename_with()} allows you to rename files with a generic
string-transforming function.
}
\details{
Only the basename of the file (returned by \code{\link[=basename]{basename()}}
undergoes string replacement).
}
\examples{
# With .dry_run = TRUE, we can make up some file paths.
dir <- "//some-fake-location/"
path <- file.path(
  dir,
  c("report_1.csv", "report_2.csv", "report-1.csv", "skipped.csv")
)

updated <- file_replace_name(path, "report_", "report-", .dry_run = TRUE)

# Collisions are detected
updated <- file_replace_name(path, "report_\\\\d", "report-1", .dry_run = TRUE)
}
